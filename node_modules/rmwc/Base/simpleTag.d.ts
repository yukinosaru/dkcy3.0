import * as React from 'react';
declare type SimpleTagFactoryT = {
    tag?: string | React.ComponentType<any>;
    classNames?: string | string[] | ((props: Object) => any);
    defaultProps?: Object;
    consumeProps?: string[];
    wrap?: boolean;
    displayName?: string;
    className?: string;
};
export declare type SimpleTagPropsT = {
    tag?: string | React.ComponentType<any>;
    className?: string;
    wrap?: boolean;
    elementRef?: any;
    theme?: string | string[];
    children?: React.ReactNode;
    apiRef?: <S>(api: S) => S;
} & React.HTMLProps<any>;
export declare const simpleTag: ({ displayName, defaultProps, consumeProps, tag, wrap: defaultWrap, classNames }: SimpleTagFactoryT) => {
    new <P>(props: any, context?: any): {
        render(): React.ReactElement<any> | null;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: any) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<any>;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    displayName: string;
    defaultProps: {
        tag: string | React.ComponentClass<any> | React.StatelessComponent<any>;
        constructor: Function;
        toString(): string;
        toLocaleString(): string;
        valueOf(): Object;
        hasOwnProperty(v: string | number | symbol): boolean;
        isPrototypeOf(v: Object): boolean;
        propertyIsEnumerable(v: string | number | symbol): boolean;
    };
    isSimpleTag: boolean;
};
export {};
